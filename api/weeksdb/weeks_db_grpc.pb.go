// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package weeksdb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WeeksDatabaseClient is the client API for WeeksDatabase service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WeeksDatabaseClient interface {
	// `GetStaticWeeks` RPC takes an empty request (`GetStaticWeeksRequest`), and returns
	// a list of static weeks present in the database. (`GetStaticWeeksResponse`)
	GetStaticWeeks(ctx context.Context, in *GetStaticWeeksRequest, opts ...grpc.CallOption) (*GetStaticWeeksResponse, error)
	// `IsWeekStatic` RPC takes a static week in the request parameter (`IsWeekStaticRequest`), and
	// returns a bool depending on whether the week is present in the static week database
	// and the requested week itself (`IsWeekStaticResponse`).
	IsWeekStatic(ctx context.Context, in *IsWeekStaticRequest, opts ...grpc.CallOption) (*IsWeekStaticResponse, error)
	// `SetStaticWeek` RPC takes a static weej in the request parameter (`SetStaticWeekRequest`), and
	// returns the requested week as a response (`SetStaticWeekResponse`).
	SetStaticWeek(ctx context.Context, in *SetStaticWeekRequest, opts ...grpc.CallOption) (*SetStaticWeekResponse, error)
	// `UnsetStaticWeek` RPC removes a static week from the database, as changes may occur throughout
	// the year.
	UnsetStaticWeek(ctx context.Context, in *UnsetStaticWeekRequest, opts ...grpc.CallOption) (*UnsetStaticWeekResponse, error)
}

type weeksDatabaseClient struct {
	cc grpc.ClientConnInterface
}

func NewWeeksDatabaseClient(cc grpc.ClientConnInterface) WeeksDatabaseClient {
	return &weeksDatabaseClient{cc}
}

func (c *weeksDatabaseClient) GetStaticWeeks(ctx context.Context, in *GetStaticWeeksRequest, opts ...grpc.CallOption) (*GetStaticWeeksResponse, error) {
	out := new(GetStaticWeeksResponse)
	err := c.cc.Invoke(ctx, "/weeksdb.WeeksDatabase/GetStaticWeeks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weeksDatabaseClient) IsWeekStatic(ctx context.Context, in *IsWeekStaticRequest, opts ...grpc.CallOption) (*IsWeekStaticResponse, error) {
	out := new(IsWeekStaticResponse)
	err := c.cc.Invoke(ctx, "/weeksdb.WeeksDatabase/IsWeekStatic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weeksDatabaseClient) SetStaticWeek(ctx context.Context, in *SetStaticWeekRequest, opts ...grpc.CallOption) (*SetStaticWeekResponse, error) {
	out := new(SetStaticWeekResponse)
	err := c.cc.Invoke(ctx, "/weeksdb.WeeksDatabase/SetStaticWeek", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weeksDatabaseClient) UnsetStaticWeek(ctx context.Context, in *UnsetStaticWeekRequest, opts ...grpc.CallOption) (*UnsetStaticWeekResponse, error) {
	out := new(UnsetStaticWeekResponse)
	err := c.cc.Invoke(ctx, "/weeksdb.WeeksDatabase/UnsetStaticWeek", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WeeksDatabaseServer is the server API for WeeksDatabase service.
// All implementations must embed UnimplementedWeeksDatabaseServer
// for forward compatibility
type WeeksDatabaseServer interface {
	// `GetStaticWeeks` RPC takes an empty request (`GetStaticWeeksRequest`), and returns
	// a list of static weeks present in the database. (`GetStaticWeeksResponse`)
	GetStaticWeeks(context.Context, *GetStaticWeeksRequest) (*GetStaticWeeksResponse, error)
	// `IsWeekStatic` RPC takes a static week in the request parameter (`IsWeekStaticRequest`), and
	// returns a bool depending on whether the week is present in the static week database
	// and the requested week itself (`IsWeekStaticResponse`).
	IsWeekStatic(context.Context, *IsWeekStaticRequest) (*IsWeekStaticResponse, error)
	// `SetStaticWeek` RPC takes a static weej in the request parameter (`SetStaticWeekRequest`), and
	// returns the requested week as a response (`SetStaticWeekResponse`).
	SetStaticWeek(context.Context, *SetStaticWeekRequest) (*SetStaticWeekResponse, error)
	// `UnsetStaticWeek` RPC removes a static week from the database, as changes may occur throughout
	// the year.
	UnsetStaticWeek(context.Context, *UnsetStaticWeekRequest) (*UnsetStaticWeekResponse, error)
	mustEmbedUnimplementedWeeksDatabaseServer()
}

// UnimplementedWeeksDatabaseServer must be embedded to have forward compatible implementations.
type UnimplementedWeeksDatabaseServer struct {
}

func (UnimplementedWeeksDatabaseServer) GetStaticWeeks(context.Context, *GetStaticWeeksRequest) (*GetStaticWeeksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStaticWeeks not implemented")
}
func (UnimplementedWeeksDatabaseServer) IsWeekStatic(context.Context, *IsWeekStaticRequest) (*IsWeekStaticResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsWeekStatic not implemented")
}
func (UnimplementedWeeksDatabaseServer) SetStaticWeek(context.Context, *SetStaticWeekRequest) (*SetStaticWeekResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStaticWeek not implemented")
}
func (UnimplementedWeeksDatabaseServer) UnsetStaticWeek(context.Context, *UnsetStaticWeekRequest) (*UnsetStaticWeekResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsetStaticWeek not implemented")
}
func (UnimplementedWeeksDatabaseServer) mustEmbedUnimplementedWeeksDatabaseServer() {}

// UnsafeWeeksDatabaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WeeksDatabaseServer will
// result in compilation errors.
type UnsafeWeeksDatabaseServer interface {
	mustEmbedUnimplementedWeeksDatabaseServer()
}

func RegisterWeeksDatabaseServer(s grpc.ServiceRegistrar, srv WeeksDatabaseServer) {
	s.RegisterService(&WeeksDatabase_ServiceDesc, srv)
}

func _WeeksDatabase_GetStaticWeeks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStaticWeeksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeeksDatabaseServer).GetStaticWeeks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weeksdb.WeeksDatabase/GetStaticWeeks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeeksDatabaseServer).GetStaticWeeks(ctx, req.(*GetStaticWeeksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeeksDatabase_IsWeekStatic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsWeekStaticRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeeksDatabaseServer).IsWeekStatic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weeksdb.WeeksDatabase/IsWeekStatic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeeksDatabaseServer).IsWeekStatic(ctx, req.(*IsWeekStaticRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeeksDatabase_SetStaticWeek_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStaticWeekRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeeksDatabaseServer).SetStaticWeek(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weeksdb.WeeksDatabase/SetStaticWeek",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeeksDatabaseServer).SetStaticWeek(ctx, req.(*SetStaticWeekRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeeksDatabase_UnsetStaticWeek_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsetStaticWeekRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeeksDatabaseServer).UnsetStaticWeek(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weeksdb.WeeksDatabase/UnsetStaticWeek",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeeksDatabaseServer).UnsetStaticWeek(ctx, req.(*UnsetStaticWeekRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WeeksDatabase_ServiceDesc is the grpc.ServiceDesc for WeeksDatabase service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WeeksDatabase_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "weeksdb.WeeksDatabase",
	HandlerType: (*WeeksDatabaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStaticWeeks",
			Handler:    _WeeksDatabase_GetStaticWeeks_Handler,
		},
		{
			MethodName: "IsWeekStatic",
			Handler:    _WeeksDatabase_IsWeekStatic_Handler,
		},
		{
			MethodName: "SetStaticWeek",
			Handler:    _WeeksDatabase_SetStaticWeek_Handler,
		},
		{
			MethodName: "UnsetStaticWeek",
			Handler:    _WeeksDatabase_UnsetStaticWeek_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/weeksdb/weeks_db.proto",
}
